{
  "version": 3,
  "sources": ["src/cjs-entry.js", "src/utils/linker.js", "src/utils/retrieve.js", "node_modules/.pnpm/bellajs@11.1.2/node_modules/bellajs/src/utils/detection.js", "node_modules/.pnpm/bellajs@11.1.2/node_modules/bellajs/src/utils/string.js", "src/utils/xmlparser.js", "src/utils/normalizer.js", "src/utils/parseJsonFeed.js", "src/utils/parseRssFeed.js", "src/utils/parseAtomFeed.js", "src/utils/parseRdfFeed.js", "src/main.js"],
  "sourcesContent": ["function warnCjsUsage () {\n  if (process.env.FEED_EXTRACTOR_CJS_IGNORE_WARNING?.toLowerCase() === 'true') return\n  const yellow = (str) => `\\u001b[33m${str}\\u001b[39m`\n  const log = process.env.FEED_EXTRACTOR_CJS_TRACE_WARNING?.toLowerCase() === 'true' ? console.trace : console.warn\n  log(\n    yellow(\n      'The CJS build of @extractus/feed-extractor is deprecated. See https://github.com/extractus/feed-extractor#cjs-deprecated for details.'\n    )\n  )\n}\n\nwarnCjsUsage()\n\nexport * from './main'\n", "// utils -> linker\n\nexport const isValid = (url = '') => {\n  try {\n    const ourl = new URL(url)\n    return ourl !== null && ourl.protocol.startsWith('http')\n  } catch (err) {\n    return false\n  }\n}\n\nexport const absolutify = (fullUrl = '', relativeUrl = '') => {\n  try {\n    const result = new URL(relativeUrl, fullUrl)\n    return result.toString()\n  } catch (err) {\n    return ''\n  }\n}\n\nconst blacklistKeys = [\n  'CNDID',\n  '__twitter_impression',\n  '_hsenc',\n  '_openstat',\n  'action_object_map',\n  'action_ref_map',\n  'action_type_map',\n  'amp',\n  'fb_action_ids',\n  'fb_action_types',\n  'fb_ref',\n  'fb_source',\n  'fbclid',\n  'ga_campaign',\n  'ga_content',\n  'ga_medium',\n  'ga_place',\n  'ga_source',\n  'ga_term',\n  'gs_l',\n  'hmb_campaign',\n  'hmb_medium',\n  'hmb_source',\n  'mbid',\n  'mc_cid',\n  'mc_eid',\n  'mkt_tok',\n  'referrer',\n  'spJobID',\n  'spMailingID',\n  'spReportId',\n  'spUserID',\n  'utm_brand',\n  'utm_campaign',\n  'utm_cid',\n  'utm_content',\n  'utm_int',\n  'utm_mailing',\n  'utm_medium',\n  'utm_name',\n  'utm_place',\n  'utm_pubreferrer',\n  'utm_reader',\n  'utm_social',\n  'utm_source',\n  'utm_swu',\n  'utm_term',\n  'utm_userid',\n  'utm_viz_id',\n  'wt_mc_o',\n  'yclid',\n  'WT.mc_id',\n  'WT.mc_ev',\n  'WT.srch',\n  'pk_source',\n  'pk_medium',\n  'pk_campaign',\n]\n\nexport const purify = (url) => {\n  try {\n    const pureUrl = new URL(url)\n\n    blacklistKeys.forEach((key) => {\n      pureUrl.searchParams.delete(key)\n    })\n\n    return pureUrl.toString().replace(pureUrl.hash, '')\n  } catch (err) {\n    return null\n  }\n}\n", "// utils -> retrieve\n\nimport fetch from 'cross-fetch'\n\nconst profetch = async (url, options = {}) => {\n  const { proxy = {}, signal = null } = options\n  const {\n    target,\n    headers = {},\n  } = proxy\n  const res = await fetch(target + encodeURIComponent(url), {\n    headers,\n    signal,\n  })\n  return res\n}\n\nexport default async (url, options = {}) => {\n  const {\n    headers = {\n      'user-agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0',\n    },\n    proxy = null,\n    agent = null,\n    signal = null,\n  } = options\n\n  const res = proxy ? await profetch(url, { proxy, signal }) : await fetch(url, { headers, agent, signal })\n\n  const status = res.status\n  if (status >= 400) {\n    throw new Error(`Request failed with error code ${status}`)\n  }\n  const contentType = res.headers.get('content-type')\n  const text = await res.text()\n\n  if (/(\\+|\\/)(xml|html)/.test(contentType)) {\n    return { type: 'xml', text: text.trim(), status, contentType }\n  }\n\n  if (/(\\+|\\/)json/.test(contentType)) {\n    try {\n      const data = JSON.parse(text)\n      return { type: 'json', json: data, status, contentType }\n    } catch (err) {\n      throw new Error('Failed to convert data to JSON object')\n    }\n  }\n  throw new Error(`Invalid content type: ${contentType}`)\n}\n", "// utils / detection\n\nconst ob2Str = (val) => {\n  return {}.toString.call(val)\n}\n\nexport const isInteger = (val) => {\n  return Number.isInteger(val)\n}\n\nexport const isArray = (val) => {\n  return Array.isArray(val)\n}\n\nexport const isString = (val) => {\n  return String(val) === val\n}\n\nexport const isNumber = (val) => {\n  return Number(val) === val\n}\n\nexport const isBoolean = (val) => {\n  return Boolean(val) === val\n}\n\nexport const isNull = (val) => {\n  return ob2Str(val) === '[object Null]'\n}\n\nexport const isUndefined = (val) => {\n  return ob2Str(val) === '[object Undefined]'\n}\n\nexport const isNil = (val) => {\n  return isUndefined(val) || isNull(val)\n}\n\nexport const isFunction = (val) => {\n  return ob2Str(val) === '[object Function]'\n}\n\nexport const isObject = (val) => {\n  return ob2Str(val) === '[object Object]' && !isArray(val)\n}\n\nexport const isDate = (val) => {\n  return val instanceof Date && !isNaN(val.valueOf())\n}\n\nexport const isElement = (v) => {\n  return ob2Str(v).match(/^\\[object HTML\\w*Element]$/) !== null\n}\n\nexport const isLetter = (val) => {\n  const re = /^[a-z]+$/i\n  return isString(val) && re.test(val)\n}\n\nexport const isEmail = (val) => {\n  const re = /^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$/i\n  return isString(val) && re.test(val)\n}\n\nexport const isEmpty = (val) => {\n  return !val || isNil(val) ||\n    (isString(val) && val === '') ||\n    (isArray(val) && val.length === 0) ||\n    (isObject(val) && Object.keys(val).length === 0)\n}\n\nexport const hasProperty = (ob, k) => {\n  if (!ob || !k) {\n    return false\n  }\n  return Object.prototype.hasOwnProperty.call(ob, k)\n}\n", "// utils / string\n\nimport {\n  isArray,\n  isString,\n  isNumber,\n  hasProperty\n} from './detection.js'\n\nconst toString = (input) => {\n  const s = isNumber(input) ? String(input) : input\n  if (!isString(s)) {\n    throw new Error('InvalidInput: String required.')\n  }\n  return s\n}\n\nexport const truncate = (s, len = 140) => {\n  const txt = toString(s)\n  const txtlen = txt.length\n  if (txtlen <= len) {\n    return txt\n  }\n  const subtxt = txt.substring(0, len).trim()\n  const subtxtArr = subtxt.split(' ')\n  const subtxtLen = subtxtArr.length\n  if (subtxtLen > 1) {\n    subtxtArr.pop()\n    return subtxtArr.map(word => word.trim()).join(' ') + '...'\n  }\n  return subtxt.substring(0, len - 3) + '...'\n}\n\nexport const stripTags = (s) => {\n  return toString(s).replace(/(<([^>]+)>)/ig, '').trim()\n}\n\nexport const escapeHTML = (s) => {\n  return toString(s)\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n}\n\nexport const unescapeHTML = (s) => {\n  return toString(s)\n    .replace(/&quot;/g, '\"')\n    .replace(/&lt;/g, '<')\n    .replace(/&gt;/g, '>')\n    .replace(/&amp;/g, '&')\n}\n\nexport const ucfirst = (s) => {\n  const x = toString(s).toLowerCase()\n  return x.length > 1 ? x.charAt(0).toUpperCase() + x.slice(1) : x.toUpperCase()\n}\n\nexport const ucwords = (s) => {\n  return toString(s).split(' ').map((w) => {\n    return ucfirst(w)\n  }).join(' ')\n}\n\nexport const replaceAll = (s, alpha, beta) => {\n  let x = toString(s)\n  const a = isNumber(alpha) ? String(alpha) : alpha\n  const b = isNumber(beta) ? String(beta) : beta\n\n  if (isString(a) && isString(b)) {\n    const aa = x.split(a)\n    x = aa.join(b)\n  } else if (isArray(a) && isString(b)) {\n    a.forEach((v) => {\n      x = replaceAll(x, v, b)\n    })\n  } else if (isArray(a) && isArray(b) && a.length === b.length) {\n    const k = a.length\n    if (k > 0) {\n      for (let i = 0; i < k; i++) {\n        const aaa = a[i]\n        const bb = b[i]\n        x = replaceAll(x, aaa, bb)\n      }\n    }\n  }\n  return x\n}\n\nconst getCharMap = () => {\n  const lmap = {\n    a: '\u00E1|\u00E0|\u1EA3|\u00E3|\u1EA1|\u0103|\u1EAF|\u1EB7|\u1EB1|\u1EB3|\u1EB5|\u00E2|\u1EA5|\u1EA7|\u1EA9|\u1EAB|\u1EAD|\u00E4|\u00E6',\n    c: '\u00E7',\n    d: '\u0111|\u00F0',\n    e: '\u00E9|\u00E8|\u1EBB|\u1EBD|\u1EB9|\u00EA|\u1EBF|\u1EC1|\u1EC3|\u1EC5|\u1EC7|\u00EB',\n    i: '\u00ED|\u00EC|\u1EC9|\u0129|\u1ECB|\u00EF|\u00EE',\n    n: '\u00F1',\n    o: '\u00F3|\u00F2|\u1ECF|\u00F5|\u1ECD|\u00F4|\u1ED1|\u1ED3|\u1ED5|\u1ED7|\u1ED9|\u01A1|\u1EDB|\u1EDD|\u1EDF|\u1EE1|\u1EE3|\u00F6|\u00F8',\n    s: '\u00DF',\n    u: '\u00FA|\u00F9|\u1EE7|\u0169|\u1EE5|\u01B0|\u1EE9|\u1EEB|\u1EED|\u1EEF|\u1EF1|\u00FB',\n    y: '\u00FD|\u1EF3|\u1EF7|\u1EF9|\u1EF5|\u00FF',\n  }\n\n  const map = {\n    ...lmap,\n  }\n  Object.keys(lmap).forEach((k) => {\n    const K = k.toUpperCase()\n    map[K] = lmap[k].toUpperCase()\n  })\n\n  return map\n}\n\nexport const stripAccent = (s) => {\n  let x = toString(s)\n\n  const updateS = (ai, key) => {\n    x = replaceAll(x, ai, key)\n  }\n\n  const map = getCharMap()\n  for (const key in map) {\n    if (hasProperty(map, key)) {\n      const a = map[key].split('|')\n      a.forEach((item) => {\n        return updateS(item, key)\n      })\n    }\n  }\n  return x\n}\n\nexport const slugify = (s, delimiter = '-') => {\n  return stripAccent(s)\n    .trim()\n    .toLowerCase()\n    .replace(/\\W+/g, ' ')\n    .replace(/\\s+/g, ' ')\n    .replace(/\\s/g, delimiter)\n}\n", "// utils / xmlparser\n\nimport { hasProperty, isString } from 'bellajs'\n\nimport { XMLValidator, XMLParser } from 'fast-xml-parser'\n\nexport const isRSS = (data = {}) => {\n  return hasProperty(data, 'rss') && hasProperty(data.rss, 'channel')\n}\n\nexport const isAtom = (data = {}) => {\n  return hasProperty(data, 'feed') && hasProperty(data.feed, 'entry')\n}\n\nexport const isRdf = (data = {}) => {\n  return hasProperty(data, 'rdf:RDF') && hasProperty(data['rdf:RDF'], 'channel')\n}\n\nexport const validate = (xml) => {\n  return (!isString(xml) || !xml.length) ? false : XMLValidator.validate(xml) === true\n}\n\nexport const xml2obj = (xml = '', extraOptions = {}) => {\n  const options = {\n    attributeNamePrefix: '@_',\n    ignoreAttributes: false,\n    ...extraOptions,\n  }\n  const parser = new XMLParser(options)\n  const jsonObj = parser.parse(xml)\n  return jsonObj\n}\n", "// normalizer\n\nimport {\n  isString,\n  isObject,\n  isArray,\n  hasProperty,\n  stripTags,\n  truncate\n} from 'bellajs'\n\nimport { decode } from 'html-entities'\n\nimport { absolutify, isValid as isValidUrl, purify as purifyUrl } from './linker.js'\n\nexport const toISODateString = (dstr) => {\n  try {\n    return dstr ? (new Date(dstr)).toISOString() : ''\n  } catch (err) {\n    return ''\n  }\n}\n\nexport const buildDescription = (val, maxlen = 0) => {\n  const stripped = stripTags(String(val).trim().replace(/^<!\\[CDATA\\[|\\]\\]>$/g, ''))\n  const text = maxlen > 0 ? truncate(stripped, maxlen) : stripped\n  return text.replace(/\\n+/g, ' ')\n}\n\nexport const getText = (val) => {\n  const txt = isObject(val) ? (val._text || val['#text'] || val._cdata || val.$t) : val\n  return txt ? decode(String(txt).trim()) : ''\n}\n\nexport const getLink = (val = [], id = '') => {\n  if (isObject(id) && hasProperty(id, '@_isPermaLink') && id['@_isPermaLink'] === 'true') {\n    return getText(id)\n  }\n  const getEntryLink = (links) => {\n    const items = links.map((item) => {\n      return getLink(item)\n    })\n    return items.length > 0 ? items[0] : ''\n  }\n  const url = isString(val)\n    ? getText(val)\n    : isObject(val) && hasProperty(val, 'href')\n      ? getText(val.href)\n      : isObject(val) && hasProperty(val, '@_href')\n        ? getText(val['@_href'])\n        : isObject(val) && hasProperty(val, '@_url')\n          ? getText(val['@_url'])\n          : isObject(val) && hasProperty(val, '_attributes')\n            ? getText(val._attributes.href)\n            : isArray(val) ? getEntryLink(val) : ''\n\n  return url ? url : isValidUrl(id) ? id : ''\n}\n\nexport const getPureUrl = (url, id = '', baseUrl) => {\n  const link = getLink(url, id)\n  const pu = purifyUrl(link)\n\n  return link\n    ? pu\n      ? pu\n      : absolutify(baseUrl, link)\n    : ''\n}\n\nconst hash = (str) => Math.abs(str.split('').reduce((s, c) => Math.imul(31, s) + c.charCodeAt(0) | 0, 0)).toString(36)\n\nexport const getEntryId = (id, url, pubDate) => {\n  return id ? getText(id) : hash(getPureUrl(url)) + '-' + (new Date(pubDate)).getTime()\n}\n\nexport const getEnclosure = (val) => {\n  const url = hasProperty(val, '@_url') ? val['@_url'] : ''\n  const type = hasProperty(val, '@_type') ? val['@_type'] : ''\n  const length = Number(hasProperty(val, '@_length') ? val['@_length'] : 0)\n  return !url || !type\n    ? null\n    : {\n      url,\n      type,\n      length,\n    }\n}\n\nconst getCategory = (v) => {\n  return isObject(v)\n    ? {\n      text: getText(v),\n      domain: v['@_domain'],\n    }\n    : v\n}\n\nexport const getOptionalTags = (val, key) => {\n  if (key === 'source') {\n    return {\n      text: getText(val),\n      url: getLink(val),\n    }\n  }\n  if (key === 'category') {\n    return isArray(val) ? val.map(getCategory) : getCategory(val)\n  }\n  if (key === 'enclosure') {\n    return getEnclosure(val)\n  }\n  return val\n}\n", "// parseJsonFeed.js\n\n// specs: https://www.jsonfeed.org/version/1.1/\n\nimport { isArray } from 'bellajs'\n\nimport {\n  toISODateString,\n  buildDescription,\n  getEntryId\n} from './normalizer.js'\n\nimport { absolutify, purify as purifyUrl } from './linker.js'\n\nconst transform = (item, options) => {\n  const {\n    useISODateFormat,\n    descriptionMaxLen,\n    baseUrl,\n    getExtraEntryFields,\n  } = options\n\n  const {\n    id = '',\n    title = '',\n    url: link = '',\n    date_published: pubDate = '',\n    summary = '',\n    content_html: htmlContent = '',\n    content_text: textContent = '',\n  } = item\n\n  const published = useISODateFormat ? toISODateString(pubDate) : pubDate\n  const extraFields = getExtraEntryFields(item)\n\n  const entry = {\n    id: getEntryId(id, link, pubDate),\n    title,\n    link: purifyUrl(link) || absolutify(baseUrl, link),\n    published,\n    description: buildDescription(textContent || htmlContent || summary, descriptionMaxLen),\n  }\n\n  return {\n    ...entry,\n    ...extraFields,\n  }\n}\n\nconst parseJson = (data, options) => {\n  const {\n    normalization,\n    baseUrl,\n    getExtraFeedFields,\n  } = options\n\n  if (!normalization) {\n    return data\n  }\n\n  const {\n    title = '',\n    home_page_url: homepageUrl = '',\n    description = '',\n    language = '',\n    items: item = [],\n  } = data\n\n  const extraFields = getExtraFeedFields(data)\n\n  const items = isArray(item) ? item : [item]\n\n  return {\n    title,\n    link: purifyUrl(homepageUrl) || absolutify(baseUrl, homepageUrl),\n    description,\n    language,\n    published: '',\n    generator: '',\n    ...extraFields,\n    entries: items.map((item) => {\n      return transform(item, options)\n    }),\n  }\n}\n\nexport default (data, options = {}) => {\n  return parseJson(data, options)\n}\n", "// parseRssFeed.js\n\n// specs: https://www.rssboard.org/rss-specification\n\nimport { isArray, hasProperty } from 'bellajs'\n\nimport {\n  getText,\n  toISODateString,\n  buildDescription,\n  getPureUrl,\n  getOptionalTags,\n  getEntryId\n} from './normalizer.js'\n\nconst transform = (item, options) => {\n  const {\n    useISODateFormat,\n    descriptionMaxLen,\n    baseUrl,\n    getExtraEntryFields,\n  } = options\n\n  const {\n    guid = '',\n    title = '',\n    link = '',\n    pubDate = '',\n    description = '',\n    'content:encoded': content = '',\n  } = item\n\n  const published = useISODateFormat ? toISODateString(pubDate) : pubDate\n  const htmlContent = getText(description || content)\n  const entry = {\n    id: getEntryId(guid, link, pubDate),\n    title: getText(title),\n    link: getPureUrl(link, guid, baseUrl),\n    published,\n    description: buildDescription(htmlContent, descriptionMaxLen),\n  }\n\n  const extraFields = getExtraEntryFields(item)\n\n  return {\n    ...entry,\n    ...extraFields,\n  }\n}\n\nconst flatten = (feed, baseUrl) => {\n  const {\n    title = '',\n    link = '',\n    item,\n  } = feed\n\n  const items = isArray(item) ? item : [item]\n  const entries = items.map((entry) => {\n    const {\n      id,\n      title = '',\n      link = '',\n    } = entry\n\n    const item = {\n      ...entry,\n      title: getText(title),\n      link: getPureUrl(link, id, baseUrl),\n    }\n\n    const txtTags = 'guid description source'.split(' ')\n\n    txtTags.forEach((key) => {\n      if (hasProperty(entry, key)) {\n        item[key] = getText(entry[key])\n      }\n    })\n\n    const optionalProps = 'source category enclosure author image'.split(' ')\n    optionalProps.forEach((key) => {\n      if (hasProperty(item, key)) {\n        entry[key] = getOptionalTags(item[key], key)\n      }\n    })\n\n    return item\n  })\n\n  const output = {\n    ...feed,\n    title: getText(title),\n    link: getPureUrl(link, baseUrl),\n    item: isArray(item) ? entries : entries[0],\n  }\n  return output\n}\n\nconst parseRss = (data, options = {}) => {\n  const {\n    normalization,\n    baseUrl,\n    getExtraFeedFields,\n  } = options\n\n  const feedData = data.rss.channel\n\n  if (!normalization) {\n    return flatten(feedData, baseUrl)\n  }\n\n  const {\n    title = '',\n    link = '',\n    description = '',\n    generator = '',\n    language = '',\n    lastBuildDate = '',\n    item = [],\n  } = feedData\n\n  const extraFields = getExtraFeedFields(feedData)\n\n  const items = isArray(item) ? item : [item]\n\n  const published = options.useISODateFormat ? toISODateString(lastBuildDate) : lastBuildDate\n\n  return {\n    title: getText(title),\n    link: getPureUrl(link, '', baseUrl),\n    description,\n    language,\n    generator,\n    published,\n    ...extraFields,\n    entries: items.map((item) => {\n      return transform(item, options)\n    }),\n  }\n}\n\nexport default (data, options = {}) => {\n  return parseRss(data, options)\n}\n", "// parseAtomFeed.js\n\n// specs: https://datatracker.ietf.org/doc/html/rfc5023\n// refer: https://validator.w3.org/feed/docs/atom.html\n\nimport { isArray, hasProperty } from 'bellajs'\n\nimport {\n  getText,\n  toISODateString,\n  buildDescription,\n  getPureUrl,\n  getEntryId\n} from './normalizer.js'\n\nconst transform = (item, options) => {\n  const {\n    useISODateFormat,\n    descriptionMaxLen,\n    baseUrl,\n    getExtraEntryFields,\n  } = options\n\n  const {\n    id = '',\n    title = '',\n    issued = '',\n    modified = '',\n    updated = '',\n    published = '',\n    link = '',\n    summary = '',\n    content = '',\n  } = item\n\n  const pubDate = updated || modified || published || issued\n  const htmlContent = getText(summary || content)\n  const entry = {\n    id: getEntryId(id, link, pubDate),\n    title: getText(title),\n    link: getPureUrl(link, id, baseUrl),\n    published: useISODateFormat ? toISODateString(pubDate) : pubDate,\n    description: buildDescription(htmlContent, descriptionMaxLen),\n  }\n\n  const extraFields = getExtraEntryFields(item)\n\n  return {\n    ...entry,\n    ...extraFields,\n  }\n}\n\nconst flatten = (feed, baseUrl) => {\n  const {\n    id,\n    title = '',\n    link = '',\n    entry,\n  } = feed\n\n  const entries = isArray(entry) ? entry : [entry]\n  const items = entries.map((entry) => {\n    const {\n      id,\n      title = '',\n      link = '',\n      summary = '',\n      content = '',\n    } = entry\n    const item = {\n      ...entry,\n      title: getText(title),\n      link: getPureUrl(link, id, baseUrl),\n    }\n    if (hasProperty(item, 'summary')) {\n      item.summary = getText(summary)\n    }\n    if (hasProperty(item, 'content')) {\n      item.content = getText(content)\n    }\n    return item\n  })\n\n  const output = {\n    ...feed,\n    title: getText(title),\n    link: getPureUrl(link, id, baseUrl),\n    entry: isArray(entry) ? items : items[0],\n  }\n  return output\n}\n\nconst parseAtom = (data, options = {}) => {\n  const {\n    normalization,\n    baseUrl,\n    getExtraFeedFields,\n  } = options\n\n  const feedData = data.feed\n\n  if (!normalization) {\n    return flatten(feedData, baseUrl)\n  }\n\n  const {\n    id = '',\n    title = '',\n    link = '',\n    subtitle = '',\n    generator = '',\n    language = '',\n    updated = '',\n    entry: item = [],\n  } = feedData\n\n  const extraFields = getExtraFeedFields(feedData)\n\n  const items = isArray(item) ? item : [item]\n\n  const published = options.useISODateFormat ? toISODateString(updated) : updated\n\n  return {\n    title: getText(title),\n    link: getPureUrl(link, id, baseUrl),\n    description: subtitle,\n    language,\n    generator,\n    published,\n    ...extraFields,\n    entries: items.map((item) => {\n      return transform(item, options)\n    }),\n  }\n}\n\nexport default (data, options = {}) => {\n  return parseAtom(data, options)\n}\n", "// parseRssFeed.js\n\n// specs: https://www.rssboard.org/rss-specification\n\nimport { isArray } from 'bellajs'\n\nimport {\n  getText,\n  toISODateString,\n  buildDescription,\n  getPureUrl,\n  getEntryId\n} from './normalizer.js'\n\nconst transform = (item, options) => {\n  const {\n    useISODateFormat,\n    descriptionMaxLen,\n    baseUrl,\n    getExtraEntryFields,\n  } = options\n\n  const {\n    guid = '',\n    title = '',\n    link = '',\n    'dc:date': pubDate = '',\n    description = '',\n    'content:encoded': content = '',\n  } = item\n\n  const published = useISODateFormat ? toISODateString(pubDate) : pubDate\n  const htmlContent = getText(description || content)\n  const entry = {\n    id: getEntryId(guid, link, pubDate),\n    title: getText(title),\n    link: getPureUrl(link, guid, baseUrl),\n    published,\n    description: buildDescription(htmlContent, descriptionMaxLen),\n  }\n\n  const extraFields = getExtraEntryFields(item)\n\n  return {\n    ...entry,\n    ...extraFields,\n  }\n}\n\nconst flatten = (feed, baseUrl) => {\n  const {\n    title = '',\n    link = '',\n    item,\n  } = feed\n\n  const items = isArray(item) ? item : [item]\n  const entries = items.map((entry) => {\n    const {\n      id,\n      title = '',\n      link = '',\n    } = entry\n\n    const item = {\n      ...entry,\n      title: getText(title),\n      link: getPureUrl(link, id, baseUrl),\n    }\n\n    return item\n  })\n\n  const output = {\n    ...feed,\n    title: getText(title),\n    link: getPureUrl(link, baseUrl),\n    item: isArray(item) ? entries : entries[0],\n  }\n  return output\n}\n\nconst parseRdf = (data, options = {}) => {\n  const {\n    normalization,\n    baseUrl,\n    getExtraFeedFields,\n  } = options\n\n  const feedData = data['rdf:RDF']\n\n  if (!normalization) {\n    return flatten(feedData, baseUrl)\n  }\n\n  const {\n    title = '',\n    link = '',\n    description = '',\n    generator = '',\n    'dc:language': language = '',\n    'dc:date': lastBuildDate = '',\n  } = feedData.channel\n\n  const { item } = feedData\n\n  const extraFields = getExtraFeedFields(feedData)\n\n  const items = isArray(item) ? item : [item]\n\n  const published = options.useISODateFormat ? toISODateString(lastBuildDate) : lastBuildDate\n\n  return {\n    title: getText(title),\n    link: getPureUrl(link, '', baseUrl),\n    description,\n    language,\n    generator,\n    published,\n    ...extraFields,\n    entries: items.map((item) => {\n      return transform(item, options)\n    }),\n  }\n}\n\nexport default (data, options = {}) => {\n  return parseRdf(data, options)\n}\n", "// main.js\n\nimport { isValid as isValidUrl } from './utils/linker.js'\n\nimport retrieve from './utils/retrieve.js'\nimport { validate, xml2obj, isRSS, isAtom, isRdf } from './utils/xmlparser.js'\nimport parseJsonFeed from './utils/parseJsonFeed.js'\nimport parseRssFeed from './utils/parseRssFeed.js'\nimport parseAtomFeed from './utils/parseAtomFeed.js'\nimport parseRdfFeed from './utils/parseRdfFeed.js'\n\nconst getopt = (options = {}) => {\n  const {\n    normalization = true,\n    descriptionMaxLen = 250,\n    useISODateFormat = true,\n    xmlParserOptions = {},\n    baseUrl = '',\n    getExtraFeedFields = () => ({}),\n    getExtraEntryFields = () => ({}),\n  } = options\n\n  return {\n    normalization,\n    descriptionMaxLen,\n    useISODateFormat,\n    xmlParserOptions,\n    baseUrl,\n    getExtraFeedFields,\n    getExtraEntryFields,\n  }\n}\n\nexport const extractFromJson = (json, options = {}) => {\n  return parseJsonFeed(json, getopt(options))\n}\n\nexport const extractFromXml = (xml, options = {}) => {\n  if (!validate(xml)) {\n    throw new Error('The XML document is not well-formed')\n  }\n\n  const opts = getopt(options)\n\n  const data = xml2obj(xml, opts.xmlParserOptions)\n\n  return isRSS(data)\n    ? parseRssFeed(data, opts)\n    : isAtom(data)\n      ? parseAtomFeed(data, opts)\n      : isRdf(data)\n        ? parseRdfFeed(data, opts)\n        : null\n}\n\nexport const extract = async (url, options = {}, fetchOptions = {}) => {\n  if (!isValidUrl(url)) {\n    throw new Error('Input param must be a valid URL')\n  }\n\n  const data = await retrieve(url, fetchOptions)\n  if (!data.text && !data.json) {\n    throw new Error(`Failed to load content from \"${url}\"`)\n  }\n\n  const { type, json, text } = data\n\n  return type === 'json' ? extractFromJson(json, options) : extractFromXml(text, options)\n}\n\nexport const read = async (url, options, fetchOptions) => {\n  console.warn('WARNING: read() is deprecated. Please use extract() instead!')\n  return extract(url, options, fetchOptions)\n}\n"],
  "mappings": "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",
  "names": ["cjs_entry_exports", "__export", "extract", "extractFromJson", "extractFromXml", "read", "__toCommonJS", "isValid", "url", "ourl", "absolutify", "fullUrl", "relativeUrl", "blacklistKeys", "purify", "pureUrl", "key", "import_cross_fetch", "profetch", "url", "options", "proxy", "signal", "target", "headers", "fetch", "retrieve_default", "agent", "res", "status", "contentType", "text", "ob2Str", "val", "isArray", "val", "isString", "isNumber", "isObject", "val", "ob2Str", "isArray", "hasProperty", "ob", "k", "toString", "input", "s", "isNumber", "isString", "truncate", "len", "txt", "subtxt", "subtxtArr", "word", "stripTags", "import_fast_xml_parser", "isRSS", "data", "hasProperty", "isAtom", "isRdf", "validate", "xml", "isString", "xml2obj", "extraOptions", "options", "import_html_entities", "toISODateString", "dstr", "buildDescription", "val", "maxlen", "stripped", "stripTags", "truncate", "getText", "txt", "isObject", "getLink", "id", "hasProperty", "getEntryLink", "links", "items", "item", "url", "isString", "isArray", "isValid", "getPureUrl", "baseUrl", "link", "pu", "purify", "absolutify", "hash", "str", "s", "c", "getEntryId", "pubDate", "getEnclosure", "type", "length", "getCategory", "v", "getOptionalTags", "key", "transform", "item", "options", "useISODateFormat", "descriptionMaxLen", "baseUrl", "getExtraEntryFields", "id", "title", "link", "pubDate", "summary", "htmlContent", "textContent", "published", "toISODateString", "extraFields", "getEntryId", "purify", "absolutify", "buildDescription", "parseJson", "data", "normalization", "getExtraFeedFields", "homepageUrl", "description", "language", "items", "isArray", "parseJsonFeed_default", "transform", "item", "options", "useISODateFormat", "descriptionMaxLen", "baseUrl", "getExtraEntryFields", "guid", "title", "link", "pubDate", "description", "content", "published", "toISODateString", "htmlContent", "getText", "entry", "getEntryId", "getPureUrl", "buildDescription", "extraFields", "flatten", "feed", "entries", "isArray", "id", "key", "hasProperty", "getOptionalTags", "parseRss", "data", "normalization", "getExtraFeedFields", "feedData", "generator", "language", "lastBuildDate", "items", "parseRssFeed_default", "transform", "item", "options", "useISODateFormat", "descriptionMaxLen", "baseUrl", "getExtraEntryFields", "id", "title", "issued", "modified", "updated", "published", "link", "summary", "content", "pubDate", "htmlContent", "getText", "entry", "getEntryId", "getPureUrl", "toISODateString", "buildDescription", "extraFields", "flatten", "feed", "items", "isArray", "hasProperty", "parseAtom", "data", "normalization", "getExtraFeedFields", "feedData", "subtitle", "generator", "language", "parseAtomFeed_default", "transform", "item", "options", "useISODateFormat", "descriptionMaxLen", "baseUrl", "getExtraEntryFields", "guid", "title", "link", "pubDate", "description", "content", "published", "toISODateString", "htmlContent", "getText", "entry", "getEntryId", "getPureUrl", "buildDescription", "extraFields", "flatten", "feed", "entries", "isArray", "id", "parseRdf", "data", "normalization", "getExtraFeedFields", "feedData", "generator", "language", "lastBuildDate", "items", "parseRdfFeed_default", "getopt", "options", "normalization", "descriptionMaxLen", "useISODateFormat", "xmlParserOptions", "baseUrl", "getExtraFeedFields", "getExtraEntryFields", "extractFromJson", "json", "parseJsonFeed_default", "extractFromXml", "xml", "validate", "opts", "data", "xml2obj", "isRSS", "parseRssFeed_default", "isAtom", "parseAtomFeed_default", "isRdf", "parseRdfFeed_default", "extract", "url", "fetchOptions", "isValid", "retrieve_default", "type", "text", "read", "warnCjsUsage", "_a", "_b", "yellow", "str"]
}
